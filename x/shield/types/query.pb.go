// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/shield/v1alpha1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryPoolRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryPoolRequest) Reset()         { *m = QueryPoolRequest{} }
func (m *QueryPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRequest) ProtoMessage()    {}
func (*QueryPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{0}
}
func (m *QueryPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRequest.Merge(m, src)
}
func (m *QueryPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRequest proto.InternalMessageInfo

func (m *QueryPoolRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type QueryPoolResponse struct {
	Pool Pool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool"`
}

func (m *QueryPoolResponse) Reset()         { *m = QueryPoolResponse{} }
func (m *QueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolResponse) ProtoMessage()    {}
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{1}
}
func (m *QueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolResponse.Merge(m, src)
}
func (m *QueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolResponse proto.InternalMessageInfo

func (m *QueryPoolResponse) GetPool() Pool {
	if m != nil {
		return m.Pool
	}
	return Pool{}
}

type QuerySponsorRequest struct {
	Sponsor string `protobuf:"bytes,1,opt,name=sponsor,proto3" json:"sponsor,omitempty"`
}

func (m *QuerySponsorRequest) Reset()         { *m = QuerySponsorRequest{} }
func (m *QuerySponsorRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySponsorRequest) ProtoMessage()    {}
func (*QuerySponsorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{2}
}
func (m *QuerySponsorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySponsorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySponsorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySponsorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySponsorRequest.Merge(m, src)
}
func (m *QuerySponsorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySponsorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySponsorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySponsorRequest proto.InternalMessageInfo

func (m *QuerySponsorRequest) GetSponsor() string {
	if m != nil {
		return m.Sponsor
	}
	return ""
}

type QuerySponsorResponse struct {
	Pools []Pool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
}

func (m *QuerySponsorResponse) Reset()         { *m = QuerySponsorResponse{} }
func (m *QuerySponsorResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySponsorResponse) ProtoMessage()    {}
func (*QuerySponsorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{3}
}
func (m *QuerySponsorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySponsorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySponsorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySponsorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySponsorResponse.Merge(m, src)
}
func (m *QuerySponsorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySponsorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySponsorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySponsorResponse proto.InternalMessageInfo

func (m *QuerySponsorResponse) GetPools() []Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

type QueryPoolsRequest struct {
}

func (m *QueryPoolsRequest) Reset()         { *m = QueryPoolsRequest{} }
func (m *QueryPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsRequest) ProtoMessage()    {}
func (*QueryPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{4}
}
func (m *QueryPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsRequest.Merge(m, src)
}
func (m *QueryPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsRequest proto.InternalMessageInfo

type QueryPoolsResponse struct {
	Pools []Pool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
}

func (m *QueryPoolsResponse) Reset()         { *m = QueryPoolsResponse{} }
func (m *QueryPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsResponse) ProtoMessage()    {}
func (*QueryPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{5}
}
func (m *QueryPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsResponse.Merge(m, src)
}
func (m *QueryPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsResponse proto.InternalMessageInfo

func (m *QueryPoolsResponse) GetPools() []Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

type QueryPoolPurchaseListsRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryPoolPurchaseListsRequest) Reset()         { *m = QueryPoolPurchaseListsRequest{} }
func (m *QueryPoolPurchaseListsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolPurchaseListsRequest) ProtoMessage()    {}
func (*QueryPoolPurchaseListsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{6}
}
func (m *QueryPoolPurchaseListsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolPurchaseListsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolPurchaseListsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolPurchaseListsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolPurchaseListsRequest.Merge(m, src)
}
func (m *QueryPoolPurchaseListsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolPurchaseListsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolPurchaseListsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolPurchaseListsRequest proto.InternalMessageInfo

func (m *QueryPoolPurchaseListsRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type QueryPurchaseListsRequest struct {
	Purchaser string `protobuf:"bytes,1,opt,name=purchaser,proto3" json:"purchaser,omitempty"`
}

func (m *QueryPurchaseListsRequest) Reset()         { *m = QueryPurchaseListsRequest{} }
func (m *QueryPurchaseListsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPurchaseListsRequest) ProtoMessage()    {}
func (*QueryPurchaseListsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{7}
}
func (m *QueryPurchaseListsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPurchaseListsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPurchaseListsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPurchaseListsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPurchaseListsRequest.Merge(m, src)
}
func (m *QueryPurchaseListsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPurchaseListsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPurchaseListsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPurchaseListsRequest proto.InternalMessageInfo

func (m *QueryPurchaseListsRequest) GetPurchaser() string {
	if m != nil {
		return m.Purchaser
	}
	return ""
}

type QueryPurchaseListsResponse struct {
	PurchaseLists []PurchaseList `protobuf:"bytes,1,rep,name=purchase_lists,json=purchaseLists,proto3" json:"purchase_lists"`
}

func (m *QueryPurchaseListsResponse) Reset()         { *m = QueryPurchaseListsResponse{} }
func (m *QueryPurchaseListsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPurchaseListsResponse) ProtoMessage()    {}
func (*QueryPurchaseListsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{8}
}
func (m *QueryPurchaseListsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPurchaseListsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPurchaseListsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPurchaseListsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPurchaseListsResponse.Merge(m, src)
}
func (m *QueryPurchaseListsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPurchaseListsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPurchaseListsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPurchaseListsResponse proto.InternalMessageInfo

func (m *QueryPurchaseListsResponse) GetPurchaseLists() []PurchaseList {
	if m != nil {
		return m.PurchaseLists
	}
	return nil
}

type QueryPurchaseListRequest struct {
	PoolId    uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Purchaser string `protobuf:"bytes,2,opt,name=purchaser,proto3" json:"purchaser,omitempty"`
}

func (m *QueryPurchaseListRequest) Reset()         { *m = QueryPurchaseListRequest{} }
func (m *QueryPurchaseListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPurchaseListRequest) ProtoMessage()    {}
func (*QueryPurchaseListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{9}
}
func (m *QueryPurchaseListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPurchaseListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPurchaseListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPurchaseListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPurchaseListRequest.Merge(m, src)
}
func (m *QueryPurchaseListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPurchaseListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPurchaseListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPurchaseListRequest proto.InternalMessageInfo

func (m *QueryPurchaseListRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPurchaseListRequest) GetPurchaser() string {
	if m != nil {
		return m.Purchaser
	}
	return ""
}

type QueryPurchaseListResponse struct {
	PurchaseList PurchaseList `protobuf:"bytes,1,opt,name=purchase_list,json=purchaseList,proto3" json:"purchase_list"`
}

func (m *QueryPurchaseListResponse) Reset()         { *m = QueryPurchaseListResponse{} }
func (m *QueryPurchaseListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPurchaseListResponse) ProtoMessage()    {}
func (*QueryPurchaseListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{10}
}
func (m *QueryPurchaseListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPurchaseListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPurchaseListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPurchaseListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPurchaseListResponse.Merge(m, src)
}
func (m *QueryPurchaseListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPurchaseListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPurchaseListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPurchaseListResponse proto.InternalMessageInfo

func (m *QueryPurchaseListResponse) GetPurchaseList() PurchaseList {
	if m != nil {
		return m.PurchaseList
	}
	return PurchaseList{}
}

type QueryPurchasesRequest struct {
}

func (m *QueryPurchasesRequest) Reset()         { *m = QueryPurchasesRequest{} }
func (m *QueryPurchasesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPurchasesRequest) ProtoMessage()    {}
func (*QueryPurchasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{11}
}
func (m *QueryPurchasesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPurchasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPurchasesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPurchasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPurchasesRequest.Merge(m, src)
}
func (m *QueryPurchasesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPurchasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPurchasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPurchasesRequest proto.InternalMessageInfo

type QueryPurchasesResponse struct {
	Purchases []Purchase `protobuf:"bytes,1,rep,name=purchases,proto3" json:"purchases"`
}

func (m *QueryPurchasesResponse) Reset()         { *m = QueryPurchasesResponse{} }
func (m *QueryPurchasesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPurchasesResponse) ProtoMessage()    {}
func (*QueryPurchasesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{12}
}
func (m *QueryPurchasesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPurchasesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPurchasesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPurchasesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPurchasesResponse.Merge(m, src)
}
func (m *QueryPurchasesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPurchasesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPurchasesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPurchasesResponse proto.InternalMessageInfo

func (m *QueryPurchasesResponse) GetPurchases() []Purchase {
	if m != nil {
		return m.Purchases
	}
	return nil
}

type QueryProviderRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryProviderRequest) Reset()         { *m = QueryProviderRequest{} }
func (m *QueryProviderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProviderRequest) ProtoMessage()    {}
func (*QueryProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{13}
}
func (m *QueryProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderRequest.Merge(m, src)
}
func (m *QueryProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderRequest proto.InternalMessageInfo

func (m *QueryProviderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryProviderResponse struct {
	Provider Provider `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider"`
}

func (m *QueryProviderResponse) Reset()         { *m = QueryProviderResponse{} }
func (m *QueryProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProviderResponse) ProtoMessage()    {}
func (*QueryProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{14}
}
func (m *QueryProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProviderResponse.Merge(m, src)
}
func (m *QueryProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProviderResponse proto.InternalMessageInfo

func (m *QueryProviderResponse) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider{}
}

type QueryProvidersRequest struct {
}

func (m *QueryProvidersRequest) Reset()         { *m = QueryProvidersRequest{} }
func (m *QueryProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProvidersRequest) ProtoMessage()    {}
func (*QueryProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{15}
}
func (m *QueryProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProvidersRequest.Merge(m, src)
}
func (m *QueryProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProvidersRequest proto.InternalMessageInfo

type QueryProvidersResponse struct {
	Providers []Provider `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers"`
}

func (m *QueryProvidersResponse) Reset()         { *m = QueryProvidersResponse{} }
func (m *QueryProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProvidersResponse) ProtoMessage()    {}
func (*QueryProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{16}
}
func (m *QueryProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProvidersResponse.Merge(m, src)
}
func (m *QueryProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProvidersResponse proto.InternalMessageInfo

func (m *QueryProvidersResponse) GetProviders() []Provider {
	if m != nil {
		return m.Providers
	}
	return nil
}

type QueryPoolParamsRequest struct {
}

func (m *QueryPoolParamsRequest) Reset()         { *m = QueryPoolParamsRequest{} }
func (m *QueryPoolParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolParamsRequest) ProtoMessage()    {}
func (*QueryPoolParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{17}
}
func (m *QueryPoolParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolParamsRequest.Merge(m, src)
}
func (m *QueryPoolParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolParamsRequest proto.InternalMessageInfo

type QueryPoolParamsResponse struct {
	Params PoolParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryPoolParamsResponse) Reset()         { *m = QueryPoolParamsResponse{} }
func (m *QueryPoolParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolParamsResponse) ProtoMessage()    {}
func (*QueryPoolParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{18}
}
func (m *QueryPoolParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolParamsResponse.Merge(m, src)
}
func (m *QueryPoolParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolParamsResponse proto.InternalMessageInfo

func (m *QueryPoolParamsResponse) GetParams() PoolParams {
	if m != nil {
		return m.Params
	}
	return PoolParams{}
}

type QueryClaimParamsRequest struct {
}

func (m *QueryClaimParamsRequest) Reset()         { *m = QueryClaimParamsRequest{} }
func (m *QueryClaimParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClaimParamsRequest) ProtoMessage()    {}
func (*QueryClaimParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{19}
}
func (m *QueryClaimParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimParamsRequest.Merge(m, src)
}
func (m *QueryClaimParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimParamsRequest proto.InternalMessageInfo

type QueryClaimParamsResponse struct {
	Params ClaimProposalParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryClaimParamsResponse) Reset()         { *m = QueryClaimParamsResponse{} }
func (m *QueryClaimParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClaimParamsResponse) ProtoMessage()    {}
func (*QueryClaimParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{20}
}
func (m *QueryClaimParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimParamsResponse.Merge(m, src)
}
func (m *QueryClaimParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimParamsResponse proto.InternalMessageInfo

func (m *QueryClaimParamsResponse) GetParams() ClaimProposalParams {
	if m != nil {
		return m.Params
	}
	return ClaimProposalParams{}
}

type QueryShieldStatusRequest struct {
}

func (m *QueryShieldStatusRequest) Reset()         { *m = QueryShieldStatusRequest{} }
func (m *QueryShieldStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShieldStatusRequest) ProtoMessage()    {}
func (*QueryShieldStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{21}
}
func (m *QueryShieldStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShieldStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShieldStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShieldStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShieldStatusRequest.Merge(m, src)
}
func (m *QueryShieldStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShieldStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShieldStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShieldStatusRequest proto.InternalMessageInfo

type QueryShieldStatusResponse struct {
	TotalCollateral         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=total_collateral,json=totalCollateral,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_collateral" yaml:"total_collateral"`
	TotalShield             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=total_shield,json=totalShield,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_shield" yaml:"total_shield"`
	TotalWithdrawing        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=total_withdrawing,json=totalWithdrawing,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_withdrawing" yaml:"total_withdrawing"`
	CurrentServiceFees      MixedDecCoins                          `protobuf:"bytes,4,opt,name=current_service_fees,json=currentServiceFees,proto3" json:"current_service_fees" yaml:"current_service_fees"`
	RemainingServiceFees    MixedDecCoins                          `protobuf:"bytes,5,opt,name=remaining_service_fees,json=remainingServiceFees,proto3" json:"remaining_service_fees" yaml:"remaining_service_fees"`
	GlobalShieldStakingPool github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=global_shield_staking_pool,json=globalShieldStakingPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"global_shield_staking_pool" yaml:"global_shield_staking_pool"`
}

func (m *QueryShieldStatusResponse) Reset()         { *m = QueryShieldStatusResponse{} }
func (m *QueryShieldStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShieldStatusResponse) ProtoMessage()    {}
func (*QueryShieldStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{22}
}
func (m *QueryShieldStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShieldStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShieldStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShieldStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShieldStatusResponse.Merge(m, src)
}
func (m *QueryShieldStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShieldStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShieldStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShieldStatusResponse proto.InternalMessageInfo

func (m *QueryShieldStatusResponse) GetCurrentServiceFees() MixedDecCoins {
	if m != nil {
		return m.CurrentServiceFees
	}
	return MixedDecCoins{}
}

func (m *QueryShieldStatusResponse) GetRemainingServiceFees() MixedDecCoins {
	if m != nil {
		return m.RemainingServiceFees
	}
	return MixedDecCoins{}
}

type QueryShieldStakingRequest struct {
	PoolId    uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Purchaser string `protobuf:"bytes,2,opt,name=purchaser,proto3" json:"purchaser,omitempty"`
}

func (m *QueryShieldStakingRequest) Reset()         { *m = QueryShieldStakingRequest{} }
func (m *QueryShieldStakingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShieldStakingRequest) ProtoMessage()    {}
func (*QueryShieldStakingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{23}
}
func (m *QueryShieldStakingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShieldStakingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShieldStakingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShieldStakingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShieldStakingRequest.Merge(m, src)
}
func (m *QueryShieldStakingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShieldStakingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShieldStakingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShieldStakingRequest proto.InternalMessageInfo

func (m *QueryShieldStakingRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryShieldStakingRequest) GetPurchaser() string {
	if m != nil {
		return m.Purchaser
	}
	return ""
}

type QueryShieldStakingResponse struct {
	ShieldStaking ShieldStaking `protobuf:"bytes,1,opt,name=shield_staking,json=shieldStaking,proto3" json:"shield_staking"`
}

func (m *QueryShieldStakingResponse) Reset()         { *m = QueryShieldStakingResponse{} }
func (m *QueryShieldStakingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShieldStakingResponse) ProtoMessage()    {}
func (*QueryShieldStakingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{24}
}
func (m *QueryShieldStakingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShieldStakingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShieldStakingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShieldStakingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShieldStakingResponse.Merge(m, src)
}
func (m *QueryShieldStakingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShieldStakingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShieldStakingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShieldStakingResponse proto.InternalMessageInfo

func (m *QueryShieldStakingResponse) GetShieldStaking() ShieldStaking {
	if m != nil {
		return m.ShieldStaking
	}
	return ShieldStaking{}
}

type QueryShieldStakingRateRequest struct {
}

func (m *QueryShieldStakingRateRequest) Reset()         { *m = QueryShieldStakingRateRequest{} }
func (m *QueryShieldStakingRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShieldStakingRateRequest) ProtoMessage()    {}
func (*QueryShieldStakingRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{25}
}
func (m *QueryShieldStakingRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShieldStakingRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShieldStakingRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShieldStakingRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShieldStakingRateRequest.Merge(m, src)
}
func (m *QueryShieldStakingRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShieldStakingRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShieldStakingRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShieldStakingRateRequest proto.InternalMessageInfo

type QueryShieldStakingRateResponse struct {
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate" yaml:"rate"`
}

func (m *QueryShieldStakingRateResponse) Reset()         { *m = QueryShieldStakingRateResponse{} }
func (m *QueryShieldStakingRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShieldStakingRateResponse) ProtoMessage()    {}
func (*QueryShieldStakingRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{26}
}
func (m *QueryShieldStakingRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShieldStakingRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShieldStakingRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShieldStakingRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShieldStakingRateResponse.Merge(m, src)
}
func (m *QueryShieldStakingRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShieldStakingRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShieldStakingRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShieldStakingRateResponse proto.InternalMessageInfo

type QueryReimbursementRequest struct {
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *QueryReimbursementRequest) Reset()         { *m = QueryReimbursementRequest{} }
func (m *QueryReimbursementRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReimbursementRequest) ProtoMessage()    {}
func (*QueryReimbursementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{27}
}
func (m *QueryReimbursementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReimbursementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReimbursementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReimbursementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReimbursementRequest.Merge(m, src)
}
func (m *QueryReimbursementRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReimbursementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReimbursementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReimbursementRequest proto.InternalMessageInfo

func (m *QueryReimbursementRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

type QueryReimbursementResponse struct {
	Reimbursement Reimbursement `protobuf:"bytes,1,opt,name=reimbursement,proto3" json:"reimbursement"`
}

func (m *QueryReimbursementResponse) Reset()         { *m = QueryReimbursementResponse{} }
func (m *QueryReimbursementResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReimbursementResponse) ProtoMessage()    {}
func (*QueryReimbursementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{28}
}
func (m *QueryReimbursementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReimbursementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReimbursementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReimbursementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReimbursementResponse.Merge(m, src)
}
func (m *QueryReimbursementResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReimbursementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReimbursementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReimbursementResponse proto.InternalMessageInfo

func (m *QueryReimbursementResponse) GetReimbursement() Reimbursement {
	if m != nil {
		return m.Reimbursement
	}
	return Reimbursement{}
}

type QueryReimbursementsRequest struct {
}

func (m *QueryReimbursementsRequest) Reset()         { *m = QueryReimbursementsRequest{} }
func (m *QueryReimbursementsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReimbursementsRequest) ProtoMessage()    {}
func (*QueryReimbursementsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{29}
}
func (m *QueryReimbursementsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReimbursementsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReimbursementsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReimbursementsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReimbursementsRequest.Merge(m, src)
}
func (m *QueryReimbursementsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReimbursementsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReimbursementsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReimbursementsRequest proto.InternalMessageInfo

type QueryReimbursementsResponse struct {
	Pairs []ProposalIDReimbursementPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *QueryReimbursementsResponse) Reset()         { *m = QueryReimbursementsResponse{} }
func (m *QueryReimbursementsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReimbursementsResponse) ProtoMessage()    {}
func (*QueryReimbursementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cb9aa5f07f44644, []int{30}
}
func (m *QueryReimbursementsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReimbursementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReimbursementsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReimbursementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReimbursementsResponse.Merge(m, src)
}
func (m *QueryReimbursementsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReimbursementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReimbursementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReimbursementsResponse proto.InternalMessageInfo

func (m *QueryReimbursementsResponse) GetPairs() []ProposalIDReimbursementPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPoolRequest)(nil), "shentu.shield.v1alpha1.QueryPoolRequest")
	proto.RegisterType((*QueryPoolResponse)(nil), "shentu.shield.v1alpha1.QueryPoolResponse")
	proto.RegisterType((*QuerySponsorRequest)(nil), "shentu.shield.v1alpha1.QuerySponsorRequest")
	proto.RegisterType((*QuerySponsorResponse)(nil), "shentu.shield.v1alpha1.QuerySponsorResponse")
	proto.RegisterType((*QueryPoolsRequest)(nil), "shentu.shield.v1alpha1.QueryPoolsRequest")
	proto.RegisterType((*QueryPoolsResponse)(nil), "shentu.shield.v1alpha1.QueryPoolsResponse")
	proto.RegisterType((*QueryPoolPurchaseListsRequest)(nil), "shentu.shield.v1alpha1.QueryPoolPurchaseListsRequest")
	proto.RegisterType((*QueryPurchaseListsRequest)(nil), "shentu.shield.v1alpha1.QueryPurchaseListsRequest")
	proto.RegisterType((*QueryPurchaseListsResponse)(nil), "shentu.shield.v1alpha1.QueryPurchaseListsResponse")
	proto.RegisterType((*QueryPurchaseListRequest)(nil), "shentu.shield.v1alpha1.QueryPurchaseListRequest")
	proto.RegisterType((*QueryPurchaseListResponse)(nil), "shentu.shield.v1alpha1.QueryPurchaseListResponse")
	proto.RegisterType((*QueryPurchasesRequest)(nil), "shentu.shield.v1alpha1.QueryPurchasesRequest")
	proto.RegisterType((*QueryPurchasesResponse)(nil), "shentu.shield.v1alpha1.QueryPurchasesResponse")
	proto.RegisterType((*QueryProviderRequest)(nil), "shentu.shield.v1alpha1.QueryProviderRequest")
	proto.RegisterType((*QueryProviderResponse)(nil), "shentu.shield.v1alpha1.QueryProviderResponse")
	proto.RegisterType((*QueryProvidersRequest)(nil), "shentu.shield.v1alpha1.QueryProvidersRequest")
	proto.RegisterType((*QueryProvidersResponse)(nil), "shentu.shield.v1alpha1.QueryProvidersResponse")
	proto.RegisterType((*QueryPoolParamsRequest)(nil), "shentu.shield.v1alpha1.QueryPoolParamsRequest")
	proto.RegisterType((*QueryPoolParamsResponse)(nil), "shentu.shield.v1alpha1.QueryPoolParamsResponse")
	proto.RegisterType((*QueryClaimParamsRequest)(nil), "shentu.shield.v1alpha1.QueryClaimParamsRequest")
	proto.RegisterType((*QueryClaimParamsResponse)(nil), "shentu.shield.v1alpha1.QueryClaimParamsResponse")
	proto.RegisterType((*QueryShieldStatusRequest)(nil), "shentu.shield.v1alpha1.QueryShieldStatusRequest")
	proto.RegisterType((*QueryShieldStatusResponse)(nil), "shentu.shield.v1alpha1.QueryShieldStatusResponse")
	proto.RegisterType((*QueryShieldStakingRequest)(nil), "shentu.shield.v1alpha1.QueryShieldStakingRequest")
	proto.RegisterType((*QueryShieldStakingResponse)(nil), "shentu.shield.v1alpha1.QueryShieldStakingResponse")
	proto.RegisterType((*QueryShieldStakingRateRequest)(nil), "shentu.shield.v1alpha1.QueryShieldStakingRateRequest")
	proto.RegisterType((*QueryShieldStakingRateResponse)(nil), "shentu.shield.v1alpha1.QueryShieldStakingRateResponse")
	proto.RegisterType((*QueryReimbursementRequest)(nil), "shentu.shield.v1alpha1.QueryReimbursementRequest")
	proto.RegisterType((*QueryReimbursementResponse)(nil), "shentu.shield.v1alpha1.QueryReimbursementResponse")
	proto.RegisterType((*QueryReimbursementsRequest)(nil), "shentu.shield.v1alpha1.QueryReimbursementsRequest")
	proto.RegisterType((*QueryReimbursementsResponse)(nil), "shentu.shield.v1alpha1.QueryReimbursementsResponse")
}

func init() {
	proto.RegisterFile("shentu/shield/v1alpha1/query.proto", fileDescriptor_1cb9aa5f07f44644)
}

var fileDescriptor_1cb9aa5f07f44644 = []byte{
	// 1532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x98, 0xcf, 0x6f, 0xd4, 0xc6,
	0x17, 0xc0, 0x63, 0x48, 0x02, 0x99, 0x24, 0x7c, 0xc9, 0x90, 0x2f, 0x59, 0x96, 0xb0, 0x1b, 0x26,
	0x24, 0x02, 0x42, 0xd6, 0x6c, 0x52, 0x28, 0xa5, 0x50, 0x55, 0x49, 0x5a, 0x29, 0xa5, 0x3f, 0x82,
	0x73, 0xa8, 0x54, 0xa4, 0xae, 0x26, 0xbb, 0xc3, 0xc6, 0xc2, 0xeb, 0x31, 0x1e, 0x6f, 0x00, 0xa5,
	0xb9, 0x20, 0xf5, 0xd2, 0x5e, 0x90, 0xaa, 0xaa, 0x52, 0x91, 0x7a, 0xef, 0xb5, 0x97, 0xf6, 0xd0,
	0xde, 0x39, 0x22, 0xf5, 0x52, 0xf5, 0x10, 0x55, 0xd0, 0xbf, 0x00, 0xa9, 0xf7, 0xca, 0x33, 0xcf,
	0x5e, 0x7b, 0x63, 0xaf, 0xbd, 0xe5, 0x94, 0x78, 0xde, 0xaf, 0xcf, 0x7b, 0x9e, 0xe7, 0x79, 0xb3,
	0x88, 0x88, 0x6d, 0x66, 0x7b, 0x6d, 0x5d, 0x6c, 0x9b, 0xcc, 0x6a, 0xe8, 0x3b, 0x55, 0x6a, 0x39,
	0xdb, 0xb4, 0xaa, 0xdf, 0x6f, 0x33, 0xf7, 0x51, 0xc5, 0x71, 0xb9, 0xc7, 0xf1, 0x49, 0xa5, 0x53,
	0x51, 0x3a, 0x95, 0x40, 0xa7, 0x78, 0xb1, 0xce, 0x45, 0x8b, 0x0b, 0x7d, 0x8b, 0x0a, 0xa6, 0x0c,
	0xf4, 0x9d, 0xea, 0x16, 0xf3, 0x68, 0x55, 0x77, 0x68, 0xd3, 0xb4, 0xa9, 0x67, 0x72, 0x5b, 0xf9,
	0x28, 0x4e, 0x36, 0x79, 0x93, 0xcb, 0x7f, 0x75, 0xff, 0x3f, 0x58, 0x9d, 0x6e, 0x72, 0xde, 0xb4,
	0x98, 0x4e, 0x1d, 0x53, 0xa7, 0xb6, 0xcd, 0x3d, 0x69, 0x22, 0x40, 0x3a, 0x9b, 0xc2, 0x06, 0x1c,
	0x4a, 0xe9, 0x5c, 0x8a, 0x52, 0x93, 0xd9, 0x4c, 0x98, 0xe0, 0x8a, 0x2c, 0xa0, 0xe3, 0xb7, 0x7d,
	0xc0, 0x0d, 0xce, 0x2d, 0x83, 0xdd, 0x6f, 0x33, 0xe1, 0xe1, 0x29, 0x74, 0xc4, 0xe1, 0xdc, 0xaa,
	0x99, 0x8d, 0x82, 0x36, 0xa3, 0x9d, 0x1f, 0x34, 0x86, 0xfd, 0xc7, 0xf5, 0x06, 0xb9, 0x85, 0x26,
	0x22, 0xca, 0xc2, 0xe1, 0xb6, 0x60, 0xf8, 0x2a, 0x1a, 0xf4, 0xc5, 0x52, 0x75, 0x74, 0x69, 0xba,
	0x92, 0x5c, 0x93, 0x8a, 0x6f, 0xb3, 0x32, 0xf8, 0x6c, 0xbf, 0x3c, 0x60, 0x48, 0x7d, 0xa2, 0xa3,
	0x13, 0xd2, 0xd9, 0xa6, 0xef, 0x86, 0xbb, 0x41, 0xf0, 0x02, 0x3a, 0x22, 0xd4, 0x8a, 0xf4, 0x38,
	0x62, 0x04, 0x8f, 0x64, 0x03, 0x4d, 0xc6, 0x0d, 0x00, 0xe0, 0x1a, 0x1a, 0xf2, 0x1d, 0x8a, 0x82,
	0x36, 0x73, 0x38, 0x27, 0x81, 0x32, 0x20, 0x27, 0x22, 0xf9, 0x08, 0x00, 0x20, 0x1f, 0x23, 0x1c,
	0x5d, 0x7c, 0xed, 0x20, 0xd7, 0xd0, 0x99, 0xd0, 0xdf, 0x46, 0xdb, 0xad, 0x6f, 0x53, 0xc1, 0x3e,
	0x34, 0x85, 0x27, 0x32, 0xcb, 0xfd, 0x16, 0x3a, 0xa5, 0x2c, 0x93, 0xac, 0xa6, 0xd1, 0x88, 0x03,
	0xeb, 0x41, 0xa5, 0x3a, 0x0b, 0x84, 0xa3, 0x62, 0x92, 0x29, 0x24, 0x73, 0x1b, 0x1d, 0x0b, 0x54,
	0x6b, 0x96, 0x2f, 0x81, 0xac, 0xce, 0xa5, 0x66, 0x15, 0x71, 0x03, 0xd9, 0x8d, 0x3b, 0x51, 0xd7,
	0xe4, 0x36, 0x2a, 0x1c, 0x08, 0x98, 0x95, 0x60, 0x3c, 0x87, 0x43, 0xdd, 0x39, 0x58, 0x09, 0xe9,
	0x87, 0x29, 0x7c, 0x82, 0xc6, 0x63, 0x29, 0xc0, 0xf6, 0xeb, 0x27, 0x83, 0xb1, 0x68, 0x06, 0x64,
	0x0a, 0xfd, 0x3f, 0x16, 0x2d, 0xdc, 0x0f, 0x9f, 0xa3, 0x93, 0xdd, 0x02, 0x60, 0x58, 0xeb, 0xe0,
	0x07, 0x15, 0x9c, 0xc9, 0x8a, 0x0f, 0xb1, 0x3b, 0x86, 0xe4, 0x32, 0x6c, 0xeb, 0x0d, 0x97, 0xef,
	0x98, 0x0d, 0x16, 0x6d, 0x04, 0xda, 0x68, 0xb8, 0x4c, 0x88, 0xa0, 0x11, 0xe0, 0x91, 0xdc, 0x09,
	0x50, 0x43, 0x0b, 0x00, 0x5a, 0x41, 0x47, 0x1d, 0x58, 0x83, 0x7a, 0xa4, 0xf3, 0x80, 0x1e, 0xf0,
	0x84, 0x76, 0x9d, 0x3a, 0xc0, 0xc2, 0xc1, 0x3a, 0x74, 0x04, 0x91, 0x3a, 0x04, 0x8b, 0x99, 0x75,
	0x88, 0xc7, 0xed, 0x18, 0x92, 0x42, 0xe0, 0xdf, 0xef, 0x13, 0xea, 0xd2, 0x56, 0x18, 0xf9, 0x0e,
	0x9a, 0x3a, 0x20, 0x81, 0xd0, 0xef, 0xa2, 0x61, 0x47, 0xae, 0x40, 0xbe, 0xa4, 0x57, 0x5f, 0x2a,
	0x5b, 0x88, 0x0c, 0x76, 0xe4, 0x14, 0x38, 0x5f, 0xb5, 0xa8, 0xd9, 0x8a, 0xc7, 0x65, 0xb0, 0xa7,
	0x63, 0x22, 0x08, 0xbc, 0xde, 0x15, 0x78, 0x21, 0x2d, 0xb0, 0x32, 0x76, 0xb9, 0xc3, 0x05, 0x4d,
	0x26, 0x28, 0x42, 0x98, 0x4d, 0x69, 0xb9, 0xe9, 0x51, 0xaf, 0x1d, 0x22, 0x7c, 0x35, 0x0c, 0x4d,
	0x10, 0x17, 0x02, 0x84, 0x87, 0x8e, 0x7b, 0xdc, 0xa3, 0x56, 0xad, 0xce, 0x2d, 0x8b, 0x7a, 0xcc,
	0xa5, 0xea, 0x33, 0x3c, 0xb2, 0xb2, 0xee, 0x47, 0xf8, 0x73, 0xbf, 0x3c, 0xdf, 0x34, 0xbd, 0xed,
	0xf6, 0x56, 0xa5, 0xce, 0x5b, 0x3a, 0x1c, 0x4a, 0xea, 0xcf, 0xa2, 0x68, 0xdc, 0xd3, 0xbd, 0x47,
	0x0e, 0x13, 0x95, 0x75, 0xdb, 0x7b, 0xb5, 0x5f, 0x9e, 0x7a, 0x44, 0x5b, 0xd6, 0x75, 0xd2, 0xed,
	0x8f, 0x18, 0xff, 0x93, 0x4b, 0xab, 0xe1, 0x0a, 0xde, 0x46, 0x63, 0x4a, 0x4b, 0xa5, 0xaa, 0x1a,
	0x77, 0xe5, 0xbd, 0xbe, 0x23, 0x9e, 0x88, 0x46, 0x54, 0xbe, 0x88, 0x31, 0x2a, 0x1f, 0x55, 0xb6,
	0xf8, 0x01, 0x9a, 0x50, 0xd2, 0x07, 0xa6, 0xb7, 0xdd, 0x70, 0xe9, 0x03, 0xd3, 0x6e, 0x16, 0x0e,
	0xcb, 0x70, 0x1f, 0xf4, 0x1d, 0xae, 0x10, 0x0d, 0x17, 0x71, 0x48, 0x0c, 0x55, 0xc4, 0x4f, 0x3b,
	0x4b, 0xf8, 0x0b, 0x34, 0x59, 0x6f, 0xbb, 0x2e, 0xb3, 0xbd, 0x9a, 0x60, 0xee, 0x8e, 0x59, 0x67,
	0xb5, 0xbb, 0x8c, 0x89, 0xc2, 0xa0, 0x7c, 0xd7, 0x73, 0x69, 0xef, 0xfa, 0x23, 0xf3, 0x21, 0x6b,
	0xac, 0xb1, 0xfa, 0x2a, 0x37, 0x6d, 0xb1, 0x32, 0xeb, 0x23, 0xbe, 0xda, 0x2f, 0x9f, 0x56, 0x81,
	0x93, 0x1c, 0x12, 0x03, 0xc3, 0xf2, 0xa6, 0x5a, 0x7d, 0x9f, 0x31, 0x81, 0x1f, 0x6b, 0xe8, 0xa4,
	0xcb, 0x5a, 0xd4, 0xb4, 0x4d, 0xbb, 0x19, 0x07, 0x18, 0xea, 0x07, 0x60, 0x0e, 0x00, 0xce, 0x28,
	0x80, 0x64, 0x97, 0xc4, 0x98, 0x0c, 0x05, 0x51, 0x88, 0x27, 0x1a, 0x2a, 0x36, 0x2d, 0xbe, 0x15,
	0xbe, 0x9b, 0x9a, 0xf0, 0xe8, 0x3d, 0xdf, 0x5a, 0x9e, 0xf6, 0xc3, 0xf2, 0x2d, 0x6c, 0xf6, 0xfd,
	0x16, 0xce, 0x2a, 0x96, 0x74, 0xcf, 0xc4, 0x98, 0x52, 0xc2, 0x70, 0xc7, 0xfb, 0xa2, 0x0d, 0x29,
	0xe9, 0xee, 0x05, 0x5f, 0xf2, 0x9a, 0x87, 0x8c, 0x03, 0x07, 0x65, 0x97, 0x4f, 0x68, 0x30, 0x03,
	0x1d, 0x8b, 0x23, 0x42, 0xb7, 0xa7, 0xbe, 0x80, 0x98, 0x9b, 0xe0, 0xa4, 0x14, 0xd1, 0x45, 0x52,
	0x86, 0x79, 0x20, 0x1e, 0x91, 0x7a, 0x2c, 0xe8, 0x79, 0x81, 0x4a, 0x69, 0x0a, 0xe1, 0xf9, 0x3d,
	0xe8, 0x52, 0x8f, 0x41, 0xaf, 0xdf, 0xec, 0xe3, 0x25, 0xac, 0xb1, 0xfa, 0xab, 0xfd, 0xf2, 0x28,
	0x6c, 0x08, 0xea, 0x31, 0x62, 0x48, 0x57, 0xe4, 0x06, 0xd4, 0xd6, 0x60, 0x66, 0x6b, 0xab, 0xed,
	0x0a, 0xd6, 0x62, 0x76, 0x78, 0x80, 0x97, 0xd1, 0xa8, 0x03, 0x5f, 0xb0, 0x4e, 0x7d, 0x51, 0xb0,
	0xb4, 0xde, 0x08, 0xc7, 0x8d, 0x2e, 0xeb, 0x10, 0x77, 0xdc, 0x8d, 0x0a, 0xb2, 0x8a, 0x18, 0xf3,
	0x12, 0x14, 0x31, 0xe6, 0x81, 0x4c, 0x27, 0x05, 0x0c, 0xbf, 0x9a, 0x36, 0x3a, 0x9d, 0x28, 0x0d,
	0x67, 0x87, 0x21, 0x87, 0x9a, 0xe1, 0x59, 0xb5, 0xdc, 0xe3, 0xac, 0x52, 0x09, 0xae, 0xc5, 0x1c,
	0x6d, 0x50, 0xd3, 0x0d, 0x47, 0x3c, 0xdf, 0xcf, 0xd2, 0x3f, 0x93, 0x68, 0x48, 0x06, 0xc4, 0x5f,
	0x6b, 0x68, 0xd0, 0xdf, 0xab, 0xf8, 0x7c, 0x9a, 0xd3, 0xee, 0x69, 0xbb, 0x78, 0x21, 0x87, 0xa6,
	0x02, 0x27, 0x95, 0xc7, 0xbf, 0xff, 0xfd, 0xcd, 0xa1, 0xf3, 0x78, 0x5e, 0x4f, 0x99, 0xed, 0xfd,
	0x2d, 0xaf, 0xef, 0x42, 0x1f, 0xec, 0xe1, 0xef, 0x34, 0x74, 0x04, 0xa6, 0x65, 0xbc, 0xd0, 0x33,
	0x4c, 0x7c, 0x08, 0x2f, 0x5e, 0xca, 0xa7, 0x0c, 0x58, 0x55, 0x89, 0xb5, 0x80, 0x2f, 0xa4, 0x61,
	0xc1, 0x04, 0xaf, 0xef, 0xc2, 0x3f, 0x7b, 0xf8, 0x4b, 0x0d, 0x0d, 0xc9, 0x01, 0x1b, 0x67, 0xa7,
	0x1f, 0xbc, 0xd6, 0xe2, 0xc5, 0x3c, 0xaa, 0xc0, 0x34, 0x27, 0x99, 0xca, 0xf8, 0x4c, 0xaf, 0x52,
	0x09, 0xfc, 0x9b, 0x86, 0x26, 0x0e, 0x0c, 0xe6, 0xf8, 0x4a, 0x66, 0xa0, 0xa4, 0x91, 0xbc, 0xb8,
	0xd4, 0xdb, 0x2c, 0x69, 0x14, 0x27, 0x37, 0x25, 0xe7, 0x9b, 0xf8, 0x4a, 0x2f, 0xce, 0x5a, 0x7c,
	0x5a, 0x8f, 0xbc, 0xe1, 0x9f, 0x34, 0x34, 0x1e, 0x67, 0xaf, 0xf6, 0x03, 0xf1, 0xdf, 0xb9, 0xaf,
	0x4b, 0xee, 0x37, 0xf0, 0x52, 0x2a, 0x77, 0x37, 0x72, 0xf0, 0xc9, 0xdd, 0xc3, 0xbf, 0x68, 0x68,
	0x2c, 0xea, 0x15, 0x5f, 0xce, 0x0d, 0x10, 0x20, 0x57, 0xfb, 0xb0, 0x00, 0xe2, 0x55, 0x49, 0x7c,
	0x13, 0xbf, 0x9d, 0x8b, 0xb8, 0x53, 0xe3, 0x18, 0xfa, 0xb7, 0x1a, 0x1a, 0x09, 0x2f, 0x02, 0x78,
	0x31, 0x17, 0x45, 0x58, 0xe7, 0x4a, 0x5e, 0x75, 0x20, 0xbe, 0x20, 0x89, 0x67, 0xf1, 0xd9, 0x2c,
	0x62, 0x81, 0x9f, 0x6a, 0xe8, 0x68, 0x30, 0x5a, 0xe3, 0xde, 0xdd, 0xdb, 0x75, 0xcf, 0x28, 0x2e,
	0xe6, 0xd4, 0x06, 0xa8, 0x25, 0x09, 0x75, 0x09, 0x5f, 0x4c, 0x85, 0x02, 0x0b, 0x7d, 0x17, 0xee,
	0x2b, 0x50, 0xb5, 0x60, 0xd0, 0xc7, 0xf9, 0x02, 0xe6, 0xad, 0x5a, 0xf7, 0x6d, 0x24, 0x47, 0xd5,
	0x42, 0x92, 0xef, 0x35, 0x84, 0x3a, 0x17, 0x03, 0x5c, 0xc9, 0x6e, 0xfb, 0xe8, 0xfd, 0xa0, 0xa8,
	0xe7, 0xd6, 0x07, 0xb4, 0x05, 0x89, 0x36, 0x87, 0x67, 0x7b, 0x37, 0xbb, 0xa2, 0xf9, 0x41, 0x43,
	0xa3, 0x91, 0x9b, 0x07, 0xee, 0x1d, 0xed, 0xe0, 0xf5, 0xa5, 0x78, 0x39, 0xbf, 0x01, 0xf0, 0x5d,
	0x92, 0x7c, 0xf3, 0xf8, 0x5c, 0x1a, 0x5f, 0xdd, 0x37, 0x0a, 0x00, 0x9f, 0x6a, 0x68, 0x2c, 0x7a,
	0x2d, 0xc9, 0x68, 0xe3, 0x84, 0xeb, 0x4d, 0x46, 0x1b, 0x27, 0xdd, 0x79, 0xc8, 0xbc, 0x64, 0x9c,
	0xc1, 0xa5, 0xd4, 0xc3, 0x46, 0xc1, 0xfc, 0xaa, 0xa1, 0xf1, 0xd8, 0x04, 0x85, 0x73, 0x06, 0x8b,
	0x0c, 0x95, 0x19, 0x5f, 0xc6, 0xc4, 0x99, 0x91, 0xac, 0x49, 0xc0, 0x77, 0xf0, 0x0d, 0xbd, 0xe7,
	0xaf, 0x74, 0xc1, 0x44, 0x99, 0xf2, 0xa1, 0xf9, 0x59, 0x43, 0x13, 0x07, 0x06, 0xc0, 0x8c, 0x83,
	0x29, 0x6d, 0xa2, 0x2c, 0x5e, 0xed, 0xd7, 0x0c, 0x52, 0x59, 0x96, 0xa9, 0x2c, 0xe2, 0x85, 0x7c,
	0xa9, 0xd4, 0xfc, 0x49, 0x52, 0x16, 0x3e, 0x36, 0x2f, 0x65, 0x14, 0x3e, 0x69, 0xe2, 0xcc, 0x28,
	0x7c, 0xe2, 0x98, 0x99, 0x5d, 0xf8, 0x60, 0x60, 0xd5, 0x77, 0x23, 0xd3, 0xec, 0x9e, 0x1e, 0x9b,
	0x2c, 0xf1, 0x8f, 0x1a, 0x3a, 0x16, 0x9f, 0x1b, 0x71, 0x1f, 0x30, 0xe1, 0xce, 0x5e, 0xee, 0xcb,
	0x26, 0xef, 0x7c, 0x17, 0x43, 0x15, 0x2b, 0xb7, 0x9e, 0xbd, 0x28, 0x69, 0xcf, 0x5f, 0x94, 0xb4,
	0xbf, 0x5e, 0x94, 0xb4, 0x27, 0x2f, 0x4b, 0x03, 0xcf, 0x5f, 0x96, 0x06, 0xfe, 0x78, 0x59, 0x1a,
	0xf8, 0xac, 0x1a, 0xbd, 0x0b, 0x30, 0xd7, 0x33, 0xef, 0xdd, 0xe5, 0x6d, 0xbb, 0x21, 0x7f, 0x45,
	0x0e, 0x9c, 0x3f, 0x0c, 0xdc, 0xcb, 0xab, 0xc1, 0xd6, 0xb0, 0xfc, 0x41, 0x78, 0xf9, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x2f, 0x40, 0xe9, 0x06, 0xf9, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	Sponsor(ctx context.Context, in *QuerySponsorRequest, opts ...grpc.CallOption) (*QuerySponsorResponse, error)
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	PoolPurchaseLists(ctx context.Context, in *QueryPoolPurchaseListsRequest, opts ...grpc.CallOption) (*QueryPurchaseListsResponse, error)
	PurchaseLists(ctx context.Context, in *QueryPurchaseListsRequest, opts ...grpc.CallOption) (*QueryPurchaseListsResponse, error)
	PurchaseList(ctx context.Context, in *QueryPurchaseListRequest, opts ...grpc.CallOption) (*QueryPurchaseListResponse, error)
	Purchases(ctx context.Context, in *QueryPurchasesRequest, opts ...grpc.CallOption) (*QueryPurchasesResponse, error)
	Provider(ctx context.Context, in *QueryProviderRequest, opts ...grpc.CallOption) (*QueryProviderResponse, error)
	Providers(ctx context.Context, in *QueryProvidersRequest, opts ...grpc.CallOption) (*QueryProvidersResponse, error)
	PoolParams(ctx context.Context, in *QueryPoolParamsRequest, opts ...grpc.CallOption) (*QueryPoolParamsResponse, error)
	ClaimParams(ctx context.Context, in *QueryClaimParamsRequest, opts ...grpc.CallOption) (*QueryClaimParamsResponse, error)
	ShieldStatus(ctx context.Context, in *QueryShieldStatusRequest, opts ...grpc.CallOption) (*QueryShieldStatusResponse, error)
	ShieldStaking(ctx context.Context, in *QueryShieldStakingRequest, opts ...grpc.CallOption) (*QueryShieldStakingResponse, error)
	ShieldStakingRate(ctx context.Context, in *QueryShieldStakingRateRequest, opts ...grpc.CallOption) (*QueryShieldStakingRateResponse, error)
	Reimbursement(ctx context.Context, in *QueryReimbursementRequest, opts ...grpc.CallOption) (*QueryReimbursementResponse, error)
	Reimbursements(ctx context.Context, in *QueryReimbursementsRequest, opts ...grpc.CallOption) (*QueryReimbursementsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sponsor(ctx context.Context, in *QuerySponsorRequest, opts ...grpc.CallOption) (*QuerySponsorResponse, error) {
	out := new(QuerySponsorResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/Sponsor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/Pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolPurchaseLists(ctx context.Context, in *QueryPoolPurchaseListsRequest, opts ...grpc.CallOption) (*QueryPurchaseListsResponse, error) {
	out := new(QueryPurchaseListsResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/PoolPurchaseLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PurchaseLists(ctx context.Context, in *QueryPurchaseListsRequest, opts ...grpc.CallOption) (*QueryPurchaseListsResponse, error) {
	out := new(QueryPurchaseListsResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/PurchaseLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PurchaseList(ctx context.Context, in *QueryPurchaseListRequest, opts ...grpc.CallOption) (*QueryPurchaseListResponse, error) {
	out := new(QueryPurchaseListResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/PurchaseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Purchases(ctx context.Context, in *QueryPurchasesRequest, opts ...grpc.CallOption) (*QueryPurchasesResponse, error) {
	out := new(QueryPurchasesResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/Purchases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Provider(ctx context.Context, in *QueryProviderRequest, opts ...grpc.CallOption) (*QueryProviderResponse, error) {
	out := new(QueryProviderResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/Provider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Providers(ctx context.Context, in *QueryProvidersRequest, opts ...grpc.CallOption) (*QueryProvidersResponse, error) {
	out := new(QueryProvidersResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/Providers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolParams(ctx context.Context, in *QueryPoolParamsRequest, opts ...grpc.CallOption) (*QueryPoolParamsResponse, error) {
	out := new(QueryPoolParamsResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/PoolParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimParams(ctx context.Context, in *QueryClaimParamsRequest, opts ...grpc.CallOption) (*QueryClaimParamsResponse, error) {
	out := new(QueryClaimParamsResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/ClaimParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShieldStatus(ctx context.Context, in *QueryShieldStatusRequest, opts ...grpc.CallOption) (*QueryShieldStatusResponse, error) {
	out := new(QueryShieldStatusResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/ShieldStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShieldStaking(ctx context.Context, in *QueryShieldStakingRequest, opts ...grpc.CallOption) (*QueryShieldStakingResponse, error) {
	out := new(QueryShieldStakingResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/ShieldStaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShieldStakingRate(ctx context.Context, in *QueryShieldStakingRateRequest, opts ...grpc.CallOption) (*QueryShieldStakingRateResponse, error) {
	out := new(QueryShieldStakingRateResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/ShieldStakingRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reimbursement(ctx context.Context, in *QueryReimbursementRequest, opts ...grpc.CallOption) (*QueryReimbursementResponse, error) {
	out := new(QueryReimbursementResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/Reimbursement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reimbursements(ctx context.Context, in *QueryReimbursementsRequest, opts ...grpc.CallOption) (*QueryReimbursementsResponse, error) {
	out := new(QueryReimbursementsResponse)
	err := c.cc.Invoke(ctx, "/shentu.shield.v1alpha1.Query/Reimbursements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	Sponsor(context.Context, *QuerySponsorRequest) (*QuerySponsorResponse, error)
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	PoolPurchaseLists(context.Context, *QueryPoolPurchaseListsRequest) (*QueryPurchaseListsResponse, error)
	PurchaseLists(context.Context, *QueryPurchaseListsRequest) (*QueryPurchaseListsResponse, error)
	PurchaseList(context.Context, *QueryPurchaseListRequest) (*QueryPurchaseListResponse, error)
	Purchases(context.Context, *QueryPurchasesRequest) (*QueryPurchasesResponse, error)
	Provider(context.Context, *QueryProviderRequest) (*QueryProviderResponse, error)
	Providers(context.Context, *QueryProvidersRequest) (*QueryProvidersResponse, error)
	PoolParams(context.Context, *QueryPoolParamsRequest) (*QueryPoolParamsResponse, error)
	ClaimParams(context.Context, *QueryClaimParamsRequest) (*QueryClaimParamsResponse, error)
	ShieldStatus(context.Context, *QueryShieldStatusRequest) (*QueryShieldStatusResponse, error)
	ShieldStaking(context.Context, *QueryShieldStakingRequest) (*QueryShieldStakingResponse, error)
	ShieldStakingRate(context.Context, *QueryShieldStakingRateRequest) (*QueryShieldStakingRateResponse, error)
	Reimbursement(context.Context, *QueryReimbursementRequest) (*QueryReimbursementResponse, error)
	Reimbursements(context.Context, *QueryReimbursementsRequest) (*QueryReimbursementsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) Sponsor(ctx context.Context, req *QuerySponsorRequest) (*QuerySponsorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sponsor not implemented")
}
func (*UnimplementedQueryServer) Pools(ctx context.Context, req *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (*UnimplementedQueryServer) PoolPurchaseLists(ctx context.Context, req *QueryPoolPurchaseListsRequest) (*QueryPurchaseListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolPurchaseLists not implemented")
}
func (*UnimplementedQueryServer) PurchaseLists(ctx context.Context, req *QueryPurchaseListsRequest) (*QueryPurchaseListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseLists not implemented")
}
func (*UnimplementedQueryServer) PurchaseList(ctx context.Context, req *QueryPurchaseListRequest) (*QueryPurchaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseList not implemented")
}
func (*UnimplementedQueryServer) Purchases(ctx context.Context, req *QueryPurchasesRequest) (*QueryPurchasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchases not implemented")
}
func (*UnimplementedQueryServer) Provider(ctx context.Context, req *QueryProviderRequest) (*QueryProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provider not implemented")
}
func (*UnimplementedQueryServer) Providers(ctx context.Context, req *QueryProvidersRequest) (*QueryProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Providers not implemented")
}
func (*UnimplementedQueryServer) PoolParams(ctx context.Context, req *QueryPoolParamsRequest) (*QueryPoolParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolParams not implemented")
}
func (*UnimplementedQueryServer) ClaimParams(ctx context.Context, req *QueryClaimParamsRequest) (*QueryClaimParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimParams not implemented")
}
func (*UnimplementedQueryServer) ShieldStatus(ctx context.Context, req *QueryShieldStatusRequest) (*QueryShieldStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShieldStatus not implemented")
}
func (*UnimplementedQueryServer) ShieldStaking(ctx context.Context, req *QueryShieldStakingRequest) (*QueryShieldStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShieldStaking not implemented")
}
func (*UnimplementedQueryServer) ShieldStakingRate(ctx context.Context, req *QueryShieldStakingRateRequest) (*QueryShieldStakingRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShieldStakingRate not implemented")
}
func (*UnimplementedQueryServer) Reimbursement(ctx context.Context, req *QueryReimbursementRequest) (*QueryReimbursementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reimbursement not implemented")
}
func (*UnimplementedQueryServer) Reimbursements(ctx context.Context, req *QueryReimbursementsRequest) (*QueryReimbursementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reimbursements not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sponsor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySponsorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sponsor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/Sponsor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sponsor(ctx, req.(*QuerySponsorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolPurchaseLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolPurchaseListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolPurchaseLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/PoolPurchaseLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolPurchaseLists(ctx, req.(*QueryPoolPurchaseListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PurchaseLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPurchaseListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PurchaseLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/PurchaseLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PurchaseLists(ctx, req.(*QueryPurchaseListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PurchaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPurchaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PurchaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/PurchaseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PurchaseList(ctx, req.(*QueryPurchaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Purchases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPurchasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Purchases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/Purchases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Purchases(ctx, req.(*QueryPurchasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/Provider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Provider(ctx, req.(*QueryProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Providers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Providers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/Providers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Providers(ctx, req.(*QueryProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/PoolParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolParams(ctx, req.(*QueryPoolParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClaimParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/ClaimParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimParams(ctx, req.(*QueryClaimParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShieldStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShieldStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShieldStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/ShieldStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShieldStatus(ctx, req.(*QueryShieldStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShieldStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShieldStakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShieldStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/ShieldStaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShieldStaking(ctx, req.(*QueryShieldStakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShieldStakingRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShieldStakingRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShieldStakingRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/ShieldStakingRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShieldStakingRate(ctx, req.(*QueryShieldStakingRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reimbursement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReimbursementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reimbursement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/Reimbursement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reimbursement(ctx, req.(*QueryReimbursementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reimbursements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReimbursementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reimbursements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shentu.shield.v1alpha1.Query/Reimbursements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reimbursements(ctx, req.(*QueryReimbursementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shentu.shield.v1alpha1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "Sponsor",
			Handler:    _Query_Sponsor_Handler,
		},
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "PoolPurchaseLists",
			Handler:    _Query_PoolPurchaseLists_Handler,
		},
		{
			MethodName: "PurchaseLists",
			Handler:    _Query_PurchaseLists_Handler,
		},
		{
			MethodName: "PurchaseList",
			Handler:    _Query_PurchaseList_Handler,
		},
		{
			MethodName: "Purchases",
			Handler:    _Query_Purchases_Handler,
		},
		{
			MethodName: "Provider",
			Handler:    _Query_Provider_Handler,
		},
		{
			MethodName: "Providers",
			Handler:    _Query_Providers_Handler,
		},
		{
			MethodName: "PoolParams",
			Handler:    _Query_PoolParams_Handler,
		},
		{
			MethodName: "ClaimParams",
			Handler:    _Query_ClaimParams_Handler,
		},
		{
			MethodName: "ShieldStatus",
			Handler:    _Query_ShieldStatus_Handler,
		},
		{
			MethodName: "ShieldStaking",
			Handler:    _Query_ShieldStaking_Handler,
		},
		{
			MethodName: "ShieldStakingRate",
			Handler:    _Query_ShieldStakingRate_Handler,
		},
		{
			MethodName: "Reimbursement",
			Handler:    _Query_Reimbursement_Handler,
		},
		{
			MethodName: "Reimbursements",
			Handler:    _Query_Reimbursements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shentu/shield/v1alpha1/query.proto",
}

func (m *QueryPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySponsorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySponsorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySponsorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sponsor) > 0 {
		i -= len(m.Sponsor)
		copy(dAtA[i:], m.Sponsor)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sponsor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySponsorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySponsorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySponsorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolPurchaseListsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolPurchaseListsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolPurchaseListsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPurchaseListsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPurchaseListsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPurchaseListsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPurchaseListsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPurchaseListsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPurchaseListsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PurchaseLists) > 0 {
		for iNdEx := len(m.PurchaseLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PurchaseLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPurchaseListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPurchaseListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPurchaseListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPurchaseListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPurchaseListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPurchaseListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PurchaseList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPurchasesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPurchasesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPurchasesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPurchasesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPurchasesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPurchasesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Purchases) > 0 {
		for iNdEx := len(m.Purchases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Purchases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Provider.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPoolParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryClaimParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryClaimParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryShieldStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShieldStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShieldStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryShieldStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShieldStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShieldStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.GlobalShieldStakingPool.Size()
		i -= size
		if _, err := m.GlobalShieldStakingPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.RemainingServiceFees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.CurrentServiceFees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalWithdrawing.Size()
		i -= size
		if _, err := m.TotalWithdrawing.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalShield.Size()
		i -= size
		if _, err := m.TotalShield.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalCollateral.Size()
		i -= size
		if _, err := m.TotalCollateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryShieldStakingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShieldStakingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShieldStakingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryShieldStakingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShieldStakingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShieldStakingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ShieldStaking.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryShieldStakingRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShieldStakingRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShieldStakingRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryShieldStakingRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShieldStakingRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShieldStakingRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReimbursementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReimbursementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReimbursementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReimbursementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReimbursementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReimbursementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reimbursement.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReimbursementsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReimbursementsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReimbursementsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryReimbursementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReimbursementsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReimbursementsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySponsorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sponsor)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySponsorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPoolPurchaseListsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryPurchaseListsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPurchaseListsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PurchaseLists) > 0 {
		for _, e := range m.PurchaseLists {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPurchaseListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPurchaseListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PurchaseList.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPurchasesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPurchasesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Purchases) > 0 {
		for _, e := range m.Purchases {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Provider.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPoolParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPoolParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryClaimParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryClaimParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryShieldStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryShieldStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalCollateral.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalShield.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalWithdrawing.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.CurrentServiceFees.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.RemainingServiceFees.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.GlobalShieldStakingPool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryShieldStakingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShieldStakingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ShieldStaking.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryShieldStakingRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryShieldStakingRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReimbursementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovQuery(uint64(m.ProposalId))
	}
	return n
}

func (m *QueryReimbursementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Reimbursement.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReimbursementsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryReimbursementsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySponsorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySponsorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySponsorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sponsor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sponsor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySponsorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySponsorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySponsorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolPurchaseListsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolPurchaseListsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolPurchaseListsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPurchaseListsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPurchaseListsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPurchaseListsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPurchaseListsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPurchaseListsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPurchaseListsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseLists = append(m.PurchaseLists, PurchaseList{})
			if err := m.PurchaseLists[len(m.PurchaseLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPurchaseListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPurchaseListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPurchaseListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPurchaseListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPurchaseListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPurchaseListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PurchaseList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPurchasesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPurchasesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPurchasesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPurchasesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPurchasesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPurchasesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchases = append(m.Purchases, Purchase{})
			if err := m.Purchases[len(m.Purchases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, Provider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShieldStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShieldStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShieldStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShieldStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShieldStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShieldStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWithdrawing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalWithdrawing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentServiceFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentServiceFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingServiceFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingServiceFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalShieldStakingPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalShieldStakingPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShieldStakingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShieldStakingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShieldStakingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShieldStakingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShieldStakingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShieldStakingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldStaking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShieldStaking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShieldStakingRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShieldStakingRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShieldStakingRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShieldStakingRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShieldStakingRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShieldStakingRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReimbursementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReimbursementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReimbursementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReimbursementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReimbursementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReimbursementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reimbursement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reimbursement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReimbursementsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReimbursementsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReimbursementsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReimbursementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReimbursementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReimbursementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, ProposalIDReimbursementPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
