// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shentu/shield/v1alpha1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the shield genesis state.
type GenesisState struct {
	ShieldAdmin                  string                                 `protobuf:"bytes,1,opt,name=shield_admin,json=shieldAdmin,proto3" json:"shield_admin,omitempty" yaml:"shield_admin"`
	NextPoolId                   uint64                                 `protobuf:"varint,2,opt,name=next_pool_id,json=nextPoolId,proto3" json:"next_pool_id,omitempty" yaml:"next_pool_id"`
	NextPurchaseId               uint64                                 `protobuf:"varint,3,opt,name=next_purchase_id,json=nextPurchaseId,proto3" json:"next_purchase_id,omitempty" yaml:"next_purchase_id"`
	PoolParams                   PoolParams                             `protobuf:"bytes,4,opt,name=pool_params,json=poolParams,proto3" json:"pool_params" yaml:"pool_params"`
	ClaimProposalParams          ClaimProposalParams                    `protobuf:"bytes,5,opt,name=claim_proposal_params,json=claimProposalParams,proto3" json:"claim_proposal_params" yaml:"claim_proposal_params"`
	TotalCollateral              github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=total_collateral,json=totalCollateral,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_collateral" yaml:"total_collateral"`
	TotalWithdrawing             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,7,opt,name=total_withdrawing,json=totalWithdrawing,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_withdrawing" yaml:"total_withdrawing"`
	TotalShield                  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,8,opt,name=total_shield,json=totalShield,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_shield" yaml:"total_shield"`
	TotalClaimed                 github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=total_claimed,json=totalClaimed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_claimed" yaml:"total_claimed"`
	ServiceFees                  MixedDecCoins                          `protobuf:"bytes,10,opt,name=service_fees,json=serviceFees,proto3" json:"service_fees" yaml:"service_fees"`
	RemainingServiceFees         MixedDecCoins                          `protobuf:"bytes,11,opt,name=remaining_service_fees,json=remainingServiceFees,proto3" json:"remaining_service_fees" yaml:"remaining_service_fees"`
	Pools                        []Pool                                 `protobuf:"bytes,12,rep,name=pools,proto3" json:"pools" yaml:"pools"`
	Providers                    []Provider                             `protobuf:"bytes,13,rep,name=providers,proto3" json:"providers" yaml:"providers"`
	PurchaseLists                []PurchaseList                         `protobuf:"bytes,14,rep,name=purchase_lists,json=purchaseLists,proto3" json:"purchase_lists" yaml:"purchases"`
	Withdraws                    []Withdraw                             `protobuf:"bytes,15,rep,name=withdraws,proto3" json:"withdraws" yaml:"withdraws"`
	LastUpdateTime               time.Time                              `protobuf:"bytes,16,opt,name=last_update_time,json=lastUpdateTime,proto3,stdtime" json:"last_update_time" yaml:"last_update_time"`
	ShieldStakingRate            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,17,opt,name=shield_staking_rate,json=shieldStakingRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shield_staking_rate" yaml:"shield_staking_rate"`
	GlobalStakingPool            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,18,opt,name=global_staking_pool,json=globalStakingPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"global_staking_pool" yaml:"global_staking_pool"`
	StakeForShields              []ShieldStaking                        `protobuf:"bytes,19,rep,name=stake_for_shields,json=stakeForShields,proto3" json:"stake_for_shields" yaml:"stake_for_shields"`
	OriginalStakings             []OriginalStaking                      `protobuf:"bytes,20,rep,name=original_stakings,json=originalStakings,proto3" json:"original_stakings" yaml:"original_stakings"`
	ProposalIDReimbursementPairs []ProposalIDReimbursementPair          `protobuf:"bytes,21,rep,name=proposalID_reimbursement_pairs,json=proposalIDReimbursementPairs,proto3" json:"proposalID_reimbursement_pairs" yaml:"proposalID_reimbursement_pairs"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c089c09a119aaa04, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

type OriginalStaking struct {
	PurchaseId uint64                                 `protobuf:"varint,1,opt,name=purchase_id,json=purchaseId,proto3" json:"purchase_id,omitempty" yaml:"purchase_id"`
	Amount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *OriginalStaking) Reset()         { *m = OriginalStaking{} }
func (m *OriginalStaking) String() string { return proto.CompactTextString(m) }
func (*OriginalStaking) ProtoMessage()    {}
func (*OriginalStaking) Descriptor() ([]byte, []int) {
	return fileDescriptor_c089c09a119aaa04, []int{1}
}
func (m *OriginalStaking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginalStaking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OriginalStaking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OriginalStaking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginalStaking.Merge(m, src)
}
func (m *OriginalStaking) XXX_Size() int {
	return m.Size()
}
func (m *OriginalStaking) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginalStaking.DiscardUnknown(m)
}

var xxx_messageInfo_OriginalStaking proto.InternalMessageInfo

type ProposalIDReimbursementPair struct {
	ProposalId    uint64        `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	Reimbursement Reimbursement `protobuf:"bytes,2,opt,name=reimbursement,proto3" json:"reimbursement" yaml:"reimbursement"`
}

func (m *ProposalIDReimbursementPair) Reset()         { *m = ProposalIDReimbursementPair{} }
func (m *ProposalIDReimbursementPair) String() string { return proto.CompactTextString(m) }
func (*ProposalIDReimbursementPair) ProtoMessage()    {}
func (*ProposalIDReimbursementPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_c089c09a119aaa04, []int{2}
}
func (m *ProposalIDReimbursementPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalIDReimbursementPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalIDReimbursementPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalIDReimbursementPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalIDReimbursementPair.Merge(m, src)
}
func (m *ProposalIDReimbursementPair) XXX_Size() int {
	return m.Size()
}
func (m *ProposalIDReimbursementPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalIDReimbursementPair.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalIDReimbursementPair proto.InternalMessageInfo

type Reimbursement struct {
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	Beneficiary string                                   `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty" yaml:"beneficiary"`
	PayoutTime  time.Time                                `protobuf:"bytes,3,opt,name=payout_time,json=payoutTime,proto3,stdtime" json:"payout_time" yaml:"payout_time"`
}

func (m *Reimbursement) Reset()         { *m = Reimbursement{} }
func (m *Reimbursement) String() string { return proto.CompactTextString(m) }
func (*Reimbursement) ProtoMessage()    {}
func (*Reimbursement) Descriptor() ([]byte, []int) {
	return fileDescriptor_c089c09a119aaa04, []int{3}
}
func (m *Reimbursement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reimbursement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reimbursement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reimbursement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reimbursement.Merge(m, src)
}
func (m *Reimbursement) XXX_Size() int {
	return m.Size()
}
func (m *Reimbursement) XXX_DiscardUnknown() {
	xxx_messageInfo_Reimbursement.DiscardUnknown(m)
}

var xxx_messageInfo_Reimbursement proto.InternalMessageInfo

// PoolParams defines the parameters for the shield pool.
type PoolParams struct {
	ProtectionPeriod  time.Duration                            `protobuf:"bytes,1,opt,name=protection_period,json=protectionPeriod,proto3,stdduration" json:"protection_period" yaml:"protection_period"`
	ShieldFeesRate    github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,2,opt,name=shield_fees_rate,json=shieldFeesRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shield_fees_rate" yaml:"shield_fees_rate"`
	WithdrawPeriod    time.Duration                            `protobuf:"bytes,3,opt,name=withdraw_period,json=withdrawPeriod,proto3,stdduration" json:"withdraw_period" yaml:"withdraw_period"`
	PoolShieldLimit   github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,4,opt,name=pool_shield_limit,json=poolShieldLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pool_shield_limit" yaml:"pool_shield_limit"`
	MinShieldPurchase github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=min_shield_purchase,json=minShieldPurchase,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_shield_purchase"`
}

func (m *PoolParams) Reset()         { *m = PoolParams{} }
func (m *PoolParams) String() string { return proto.CompactTextString(m) }
func (*PoolParams) ProtoMessage()    {}
func (*PoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c089c09a119aaa04, []int{4}
}
func (m *PoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolParams.Merge(m, src)
}
func (m *PoolParams) XXX_Size() int {
	return m.Size()
}
func (m *PoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_PoolParams proto.InternalMessageInfo

// ClaimProposalParams defines the parameters for the shield claim proposals.
type ClaimProposalParams struct {
	ClaimPeriod  time.Duration                            `protobuf:"bytes,1,opt,name=claim_period,json=claimPeriod,proto3,stdduration" json:"claim_period" yaml:"claim_period"`
	PayoutPeriod time.Duration                            `protobuf:"bytes,2,opt,name=payout_period,json=payoutPeriod,proto3,stdduration" json:"payout_period" yaml:"payout_period"`
	MinDeposit   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=min_deposit,json=minDeposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"min_deposit"`
	DepositRate  github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,4,opt,name=deposit_rate,json=depositRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"deposit_rate" yaml:"deposit_rate"`
	FeesRate     github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,5,opt,name=fees_rate,json=feesRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fees_rate" yaml:"fees_rate"`
}

func (m *ClaimProposalParams) Reset()         { *m = ClaimProposalParams{} }
func (m *ClaimProposalParams) String() string { return proto.CompactTextString(m) }
func (*ClaimProposalParams) ProtoMessage()    {}
func (*ClaimProposalParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c089c09a119aaa04, []int{5}
}
func (m *ClaimProposalParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimProposalParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimProposalParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimProposalParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimProposalParams.Merge(m, src)
}
func (m *ClaimProposalParams) XXX_Size() int {
	return m.Size()
}
func (m *ClaimProposalParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimProposalParams.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimProposalParams proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisState)(nil), "shentu.shield.v1alpha1.GenesisState")
	proto.RegisterType((*OriginalStaking)(nil), "shentu.shield.v1alpha1.OriginalStaking")
	proto.RegisterType((*ProposalIDReimbursementPair)(nil), "shentu.shield.v1alpha1.ProposalIDReimbursementPair")
	proto.RegisterType((*Reimbursement)(nil), "shentu.shield.v1alpha1.Reimbursement")
	proto.RegisterType((*PoolParams)(nil), "shentu.shield.v1alpha1.PoolParams")
	proto.RegisterType((*ClaimProposalParams)(nil), "shentu.shield.v1alpha1.ClaimProposalParams")
}

func init() {
	proto.RegisterFile("shentu/shield/v1alpha1/genesis.proto", fileDescriptor_c089c09a119aaa04)
}

var fileDescriptor_c089c09a119aaa04 = []byte{
	// 1493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xcf, 0xe6, 0x47, 0xbf, 0xcd, 0xd8, 0x49, 0xec, 0x71, 0x9a, 0xee, 0x37, 0x0d, 0x76, 0x34,
	0x6d, 0x21, 0x12, 0xaa, 0x4d, 0xda, 0x03, 0xd0, 0x0b, 0xc2, 0x49, 0x0b, 0x81, 0x22, 0xa2, 0x0d,
	0xa8, 0x08, 0x84, 0x96, 0xb1, 0x77, 0xe2, 0x8c, 0xb2, 0xbb, 0xb3, 0xda, 0x19, 0xa7, 0x8d, 0xe8,
	0x09, 0x09, 0x89, 0x63, 0x2f, 0x48, 0x70, 0xeb, 0x11, 0x21, 0xf1, 0x7f, 0x54, 0xe2, 0xd2, 0x0b,
	0x08, 0x71, 0x48, 0x51, 0x7b, 0xe1, 0x9c, 0xbf, 0x00, 0xcd, 0x8f, 0xf5, 0xce, 0x26, 0x76, 0x5a,
	0x4b, 0x3d, 0x25, 0xf3, 0xe6, 0xbd, 0xcf, 0x67, 0xde, 0x9b, 0xf7, 0xde, 0xbc, 0x35, 0xb8, 0xc2,
	0xf7, 0x48, 0x2c, 0xfa, 0x2d, 0xbe, 0x47, 0x49, 0x18, 0xb4, 0x0e, 0xd6, 0x71, 0x98, 0xec, 0xe1,
	0xf5, 0x56, 0x8f, 0xc4, 0x84, 0x53, 0xde, 0x4c, 0x52, 0x26, 0x18, 0x5c, 0xd2, 0x5a, 0x4d, 0xad,
	0xd5, 0xcc, 0xb4, 0x96, 0x17, 0x7b, 0xac, 0xc7, 0x94, 0x4a, 0x4b, 0xfe, 0xa7, 0xb5, 0x97, 0xeb,
	0x5d, 0xc6, 0x23, 0xc6, 0x5b, 0x1d, 0xcc, 0x49, 0xeb, 0x60, 0xbd, 0x43, 0x04, 0x5e, 0x6f, 0x75,
	0x19, 0x8d, 0xcd, 0x7e, 0xa3, 0xc7, 0x58, 0x2f, 0x24, 0x2d, 0xb5, 0xea, 0xf4, 0x77, 0x5b, 0x82,
	0x46, 0x84, 0x0b, 0x1c, 0x25, 0x19, 0xc0, 0x49, 0x85, 0xa0, 0x9f, 0x62, 0x41, 0x59, 0x06, 0x30,
	0x9c, 0xf6, 0xf2, 0x08, 0x57, 0xcc, 0xa1, 0x95, 0x12, 0xfa, 0xa3, 0x0a, 0xca, 0x1f, 0x68, 0xdf,
	0x76, 0x04, 0x16, 0x04, 0xde, 0x04, 0x65, 0xad, 0xe0, 0xe3, 0x20, 0xa2, 0xb1, 0xeb, 0xac, 0x3a,
	0x6b, 0xb3, 0xed, 0x8b, 0xc7, 0x47, 0x8d, 0xda, 0x21, 0x8e, 0xc2, 0x9b, 0xc8, 0xde, 0x45, 0x5e,
	0x49, 0x2f, 0xdf, 0x97, 0x2b, 0xf8, 0x2e, 0x28, 0xc7, 0xe4, 0xbe, 0xf0, 0x13, 0xc6, 0x42, 0x9f,
	0x06, 0xee, 0xe4, 0xaa, 0xb3, 0x36, 0x6d, 0xdb, 0xda, 0xbb, 0xc8, 0x03, 0x72, 0xb9, 0xcd, 0x58,
	0xb8, 0x15, 0xc0, 0x5b, 0xa0, 0xa2, 0x37, 0xfb, 0x69, 0x77, 0x0f, 0x73, 0x22, 0xcd, 0xa7, 0x94,
	0xf9, 0xa5, 0xe3, 0xa3, 0xc6, 0x45, 0xdb, 0x3c, 0xd7, 0x40, 0xde, 0xbc, 0x82, 0x30, 0x92, 0xad,
	0x00, 0xfa, 0xa0, 0xa4, 0xe0, 0x13, 0x9c, 0xe2, 0x88, 0xbb, 0xd3, 0xab, 0xce, 0x5a, 0xe9, 0x3a,
	0x6a, 0x0e, 0xbf, 0xae, 0xa6, 0xe4, 0xde, 0x56, 0x9a, 0xed, 0xe5, 0xc7, 0x47, 0x8d, 0x89, 0xe3,
	0xa3, 0x06, 0xd4, 0x4c, 0x16, 0x08, 0xf2, 0x40, 0x32, 0xd0, 0x83, 0xdf, 0x3b, 0xe0, 0x42, 0x37,
	0xc4, 0x34, 0xf2, 0x93, 0x94, 0x25, 0x8c, 0xe3, 0x01, 0xd7, 0x8c, 0xe2, 0x7a, 0x73, 0x14, 0xd7,
	0x86, 0x34, 0xda, 0x36, 0x36, 0x86, 0xf4, 0x8a, 0x21, 0x5d, 0xd1, 0xa4, 0x43, 0x71, 0x91, 0x57,
	0xeb, 0x9e, 0x36, 0x85, 0x02, 0x54, 0x04, 0x13, 0x38, 0xf4, 0xbb, 0x2c, 0x0c, 0xb1, 0x20, 0x29,
	0x0e, 0xdd, 0x73, 0xea, 0xaa, 0xb6, 0x24, 0xe8, 0xdf, 0x47, 0x8d, 0xd7, 0x7b, 0x54, 0xec, 0xf5,
	0x3b, 0xcd, 0x2e, 0x8b, 0x5a, 0x26, 0x01, 0xf5, 0x9f, 0x6b, 0x3c, 0xd8, 0x6f, 0x89, 0xc3, 0x84,
	0xf0, 0xe6, 0x56, 0x2c, 0xf2, 0xe8, 0x9e, 0xc4, 0x43, 0xde, 0x82, 0x12, 0x6d, 0x0c, 0x24, 0xf0,
	0x1e, 0xa8, 0x6a, 0xad, 0x7b, 0x54, 0xec, 0x05, 0x29, 0xbe, 0x47, 0xe3, 0x9e, 0xfb, 0x3f, 0x45,
	0xfb, 0xd1, 0xd8, 0xb4, 0xae, 0x4d, 0x6b, 0x01, 0x22, 0x4f, 0xbb, 0x76, 0x37, 0x17, 0xc1, 0x3d,
	0x50, 0xd6, 0x7a, 0x3a, 0xac, 0xee, 0x79, 0xc5, 0x79, 0x6b, 0x6c, 0xce, 0x9a, 0xcd, 0xa9, 0xb1,
	0x90, 0x57, 0x52, 0xcb, 0x1d, 0xb5, 0x82, 0xfb, 0x60, 0xce, 0x04, 0x42, 0x46, 0x9d, 0x04, 0xee,
	0xac, 0xa2, 0xba, 0x3d, 0x36, 0xd5, 0x62, 0x21, 0xaa, 0x1a, 0x0c, 0x79, 0xda, 0x8d, 0x0d, 0xbd,
	0x84, 0x04, 0x94, 0x39, 0x49, 0x0f, 0x68, 0x97, 0xf8, 0xbb, 0x84, 0x70, 0x17, 0xa8, 0x1c, 0xba,
	0x3a, 0x2a, 0x87, 0x3e, 0xa1, 0xf7, 0x49, 0xb0, 0x49, 0xba, 0x1b, 0x8c, 0xc6, 0xbc, 0x7d, 0xc9,
	0x64, 0x4f, 0x56, 0x97, 0x16, 0x90, 0xac, 0x4b, 0xbd, 0xbc, 0x4d, 0x08, 0x87, 0xdf, 0x39, 0x60,
	0x29, 0x25, 0x11, 0xa6, 0x31, 0x8d, 0x7b, 0x7e, 0x81, 0xb1, 0x34, 0x0e, 0xe3, 0x55, 0xc3, 0xf8,
	0x9a, 0x66, 0x1c, 0x0e, 0x89, 0xbc, 0xc5, 0xc1, 0xc6, 0x8e, 0x75, 0x88, 0x0f, 0xc1, 0x8c, 0xac,
	0x23, 0xee, 0x96, 0x57, 0xa7, 0xd6, 0x4a, 0xd7, 0x57, 0xce, 0x2a, 0xca, 0xf6, 0xa2, 0x61, 0x2a,
	0xe7, 0xe5, 0xc8, 0x91, 0xa7, 0x01, 0xe0, 0x17, 0x60, 0x36, 0x49, 0xd9, 0x01, 0x0d, 0x48, 0xca,
	0xdd, 0x39, 0x85, 0xb6, 0x3a, 0x12, 0xcd, 0x28, 0xb6, 0x5d, 0x83, 0x58, 0x31, 0x88, 0x19, 0x00,
	0xf2, 0x72, 0x30, 0x48, 0xc0, 0xfc, 0xa0, 0xbd, 0x84, 0x94, 0x0b, 0xee, 0xce, 0x2b, 0xf8, 0x2b,
	0x23, 0xe1, 0x8d, 0xf6, 0x1d, 0xca, 0xc5, 0x29, 0x0a, 0xb3, 0xc7, 0x91, 0x37, 0x97, 0x58, 0x7a,
	0xca, 0x81, 0x2c, 0xdf, 0xb9, 0xbb, 0x70, 0xb6, 0x03, 0x59, 0x15, 0x9c, 0x44, 0x1f, 0x00, 0x20,
	0x2f, 0x07, 0x83, 0x14, 0x54, 0x42, 0xcc, 0x85, 0xdf, 0x4f, 0x02, 0x2c, 0x88, 0x2f, 0x1f, 0x12,
	0xb7, 0xa2, 0xae, 0x78, 0xb9, 0xa9, 0x1f, 0x91, 0x66, 0xf6, 0x88, 0x34, 0x3f, 0xcb, 0x5e, 0x99,
	0xf6, 0x65, 0x03, 0x6d, 0x1a, 0xc1, 0x49, 0x04, 0xf4, 0xf0, 0x69, 0xc3, 0xf1, 0xe6, 0xa5, 0xf8,
	0x73, 0x25, 0x95, 0x96, 0xf0, 0x01, 0xa8, 0x99, 0xa7, 0x80, 0x0b, 0xbc, 0x2f, 0xb3, 0x20, 0xc5,
	0x82, 0xb8, 0x55, 0x55, 0x2e, 0x77, 0xc6, 0x28, 0x97, 0x4d, 0xd2, 0x3d, 0x3e, 0x6a, 0x2c, 0x17,
	0x5e, 0x17, 0x1b, 0x12, 0x79, 0x55, 0x2d, 0xdd, 0xd1, 0x42, 0x4f, 0x3e, 0x53, 0x0f, 0x40, 0xad,
	0x17, 0xb2, 0x8e, 0xac, 0x62, 0xa3, 0x2a, 0x73, 0xc3, 0x85, 0x63, 0xb3, 0xeb, 0x62, 0x35, 0xec,
	0x43, 0x20, 0x91, 0x57, 0xd5, 0x52, 0xc3, 0x2e, 0xd3, 0x13, 0x72, 0x50, 0x95, 0x3a, 0xc4, 0xdf,
	0x65, 0xa9, 0x69, 0x23, 0xdc, 0xad, 0xa9, 0x8b, 0x1c, 0x59, 0x4a, 0x3b, 0xb6, 0x0f, 0xed, 0x55,
	0x13, 0x72, 0xd3, 0x04, 0x4f, 0xa1, 0x21, 0x6f, 0x41, 0xc9, 0x6e, 0xb3, 0x54, 0x1b, 0x72, 0x78,
	0x00, 0xaa, 0x2c, 0xa5, 0x3d, 0x1a, 0xe7, 0x27, 0xe4, 0xee, 0xa2, 0x22, 0x7d, 0x63, 0x14, 0xe9,
	0xa7, 0xc6, 0x60, 0x04, 0xed, 0x29, 0x3c, 0xe4, 0x55, 0x58, 0xd1, 0x84, 0xc3, 0x5f, 0x1c, 0x50,
	0xcf, 0x1e, 0xa5, 0xad, 0x4d, 0x3f, 0x25, 0x34, 0xea, 0xf4, 0x53, 0x4e, 0x22, 0x12, 0x0b, 0x3f,
	0xc1, 0x34, 0xe5, 0xee, 0x05, 0x75, 0x8a, 0x1b, 0x67, 0x14, 0xa1, 0xb1, 0xf6, 0x6c, 0xe3, 0x6d,
	0x4c, 0xd3, 0xf6, 0x35, 0x73, 0xa2, 0xab, 0x83, 0xba, 0x3c, 0x83, 0x08, 0x79, 0x2b, 0xc9, 0x68,
	0x2c, 0x7e, 0xf3, 0xfc, 0x0f, 0x8f, 0x1a, 0x13, 0xff, 0x3e, 0x6a, 0x4c, 0xa0, 0xdf, 0x1c, 0xb0,
	0x70, 0xc2, 0x79, 0xf8, 0x36, 0x28, 0xd9, 0xe3, 0x85, 0xa3, 0xc6, 0x8b, 0x25, 0xeb, 0xd1, 0xb7,
	0x27, 0x0b, 0x90, 0xe4, 0x53, 0xc5, 0x5d, 0x70, 0x0e, 0x47, 0xac, 0x1f, 0x0b, 0x35, 0xd1, 0xcc,
	0xb6, 0xdf, 0x1b, 0x3b, 0xbf, 0xe6, 0x34, 0x83, 0x46, 0x41, 0x9e, 0x81, 0xb3, 0xce, 0xfb, 0xbb,
	0x03, 0x2e, 0x9d, 0x11, 0x26, 0x75, 0xf6, 0x6c, 0x30, 0x18, 0x7a, 0xf6, 0x7c, 0x53, 0x9e, 0x3d,
	0x43, 0x0a, 0x20, 0x05, 0x73, 0x85, 0x40, 0x2a, 0x17, 0xce, 0x48, 0xd3, 0x02, 0x75, 0x7b, 0xc5,
	0xdc, 0xce, 0x62, 0xd6, 0xf1, 0xad, 0x4d, 0xe4, 0x15, 0x91, 0x2d, 0x6f, 0x7e, 0x9c, 0x04, 0x73,
	0x05, 0x20, 0xd8, 0x1d, 0x84, 0xd0, 0x51, 0xb9, 0xf2, 0xff, 0xa6, 0x8e, 0x54, 0x53, 0x0e, 0xc5,
	0x4d, 0x33, 0x14, 0x37, 0xe5, 0x33, 0xd3, 0x7e, 0x4b, 0x72, 0xfe, 0xfa, 0xb4, 0xb1, 0xf6, 0x12,
	0xd1, 0x55, 0xef, 0x52, 0x16, 0x4e, 0xf8, 0x0e, 0x28, 0x75, 0x48, 0x4c, 0x76, 0x69, 0x97, 0xe2,
	0xf4, 0xd0, 0x5c, 0x96, 0x15, 0x24, 0x6b, 0x13, 0x79, 0xb6, 0x2a, 0xfc, 0x0a, 0x94, 0x12, 0x7c,
	0xc8, 0xfa, 0x42, 0xb7, 0xcc, 0xa9, 0x17, 0xb6, 0xcc, 0xfa, 0x89, 0x79, 0x31, 0x37, 0xd6, 0xdd,
	0x12, 0x68, 0x89, 0x34, 0xb0, 0xe2, 0xf2, 0xe7, 0x34, 0x00, 0xf9, 0xd0, 0x09, 0x43, 0x50, 0x95,
	0xd0, 0xa4, 0x2b, 0x67, 0x79, 0x3f, 0x21, 0x29, 0x65, 0xfa, 0x6a, 0x65, 0x7c, 0x4e, 0x72, 0x6f,
	0x9a, 0x99, 0x7f, 0x30, 0x35, 0xba, 0x83, 0x9b, 0x2f, 0x22, 0xa0, 0x9f, 0xe4, 0x01, 0x2a, 0xb9,
	0x7c, 0x5b, 0x89, 0x21, 0x07, 0x15, 0xd3, 0x5d, 0xe5, 0x33, 0xad, 0xbb, 0xf5, 0xe4, 0xd8, 0x23,
	0xa3, 0xee, 0xd6, 0x17, 0x0b, 0xdd, 0x7a, 0x80, 0x87, 0xbc, 0x79, 0x2d, 0x92, 0x2f, 0xbe, 0xea,
	0xd3, 0xbb, 0x60, 0x21, 0x7b, 0x9d, 0x32, 0x07, 0xa7, 0x5e, 0xe4, 0x20, 0x32, 0x0e, 0x2e, 0x15,
	0x5f, 0xba, 0x82, 0x7b, 0xf3, 0x99, 0xd4, 0x38, 0x77, 0x00, 0xaa, 0x6a, 0x66, 0x37, 0x27, 0x0a,
	0x69, 0x44, 0x85, 0x1a, 0xff, 0xc7, 0x9b, 0x4c, 0xb5, 0x77, 0xae, 0xf5, 0x11, 0x60, 0x03, 0x22,
	0x6f, 0x41, 0xca, 0x74, 0x43, 0xbe, 0x23, 0x25, 0xf0, 0x5b, 0x50, 0x8b, 0x68, 0x9c, 0x69, 0x65,
	0x3d, 0xc3, 0x9d, 0x79, 0xf5, 0x49, 0x5e, 0x8d, 0x68, 0xac, 0x99, 0xb3, 0xa1, 0xc3, 0x4a, 0xac,
	0x9f, 0xa7, 0x41, 0x6d, 0xc8, 0x17, 0x06, 0xfc, 0x1a, 0x94, 0xcd, 0x57, 0xc5, 0x4b, 0x26, 0x57,
	0xa3, 0x38, 0x54, 0xda, 0xc6, 0x3a, 0xf0, 0x25, 0xfd, 0x35, 0xa2, 0xa3, 0xfe, 0x0d, 0x98, 0x33,
	0x99, 0x6f, 0xf0, 0x27, 0x5f, 0x84, 0xbf, 0x5a, 0x6c, 0x28, 0x05, 0x6b, 0x4d, 0x50, 0xd6, 0x32,
	0xc3, 0x10, 0x82, 0x92, 0x8c, 0x6f, 0x40, 0x12, 0xc6, 0xa9, 0x70, 0xa7, 0x5e, 0x7d, 0x5c, 0x41,
	0x44, 0xe3, 0x4d, 0x0d, 0x2f, 0x3f, 0x33, 0x0c, 0x93, 0x2e, 0x8f, 0xe9, 0xb1, 0x3f, 0x33, 0x74,
	0x02, 0x99, 0xe8, 0xd9, 0x58, 0xc8, 0x2b, 0x99, 0xa5, 0xaa, 0x0b, 0x1f, 0xcc, 0xe6, 0x55, 0x38,
	0xa3, 0x68, 0xda, 0x63, 0xd3, 0x98, 0x51, 0xd0, 0x2a, 0xbf, 0xf3, 0xbb, 0xa6, 0xf0, 0xf2, 0xdc,
	0x68, 0x7f, 0xfc, 0xf8, 0x59, 0xdd, 0x79, 0xf2, 0xac, 0xee, 0xfc, 0xf3, 0xac, 0xee, 0x3c, 0x7c,
	0x5e, 0x9f, 0x78, 0xf2, 0xbc, 0x3e, 0xf1, 0xd7, 0xf3, 0xfa, 0xc4, 0x97, 0xeb, 0x36, 0x13, 0x49,
	0x05, 0xdd, 0xdf, 0x65, 0xfd, 0x38, 0x50, 0x37, 0xd5, 0x32, 0xbf, 0x1e, 0xdc, 0xcf, 0x7e, 0x3f,
	0x50, 0xc4, 0x9d, 0x73, 0xea, 0x4a, 0x6f, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x39, 0x9b,
	0xd6, 0x28, 0x11, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposalIDReimbursementPairs) > 0 {
		for iNdEx := len(m.ProposalIDReimbursementPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposalIDReimbursementPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.OriginalStakings) > 0 {
		for iNdEx := len(m.OriginalStakings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OriginalStakings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.StakeForShields) > 0 {
		for iNdEx := len(m.StakeForShields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeForShields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	{
		size := m.GlobalStakingPool.Size()
		i -= size
		if _, err := m.GlobalStakingPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.ShieldStakingRate.Size()
		i -= size
		if _, err := m.ShieldStakingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastUpdateTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastUpdateTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if len(m.Withdraws) > 0 {
		for iNdEx := len(m.Withdraws) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Withdraws[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.PurchaseLists) > 0 {
		for iNdEx := len(m.PurchaseLists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PurchaseLists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	{
		size, err := m.RemainingServiceFees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.ServiceFees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.TotalClaimed.Size()
		i -= size
		if _, err := m.TotalClaimed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.TotalShield.Size()
		i -= size
		if _, err := m.TotalShield.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.TotalWithdrawing.Size()
		i -= size
		if _, err := m.TotalWithdrawing.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.TotalCollateral.Size()
		i -= size
		if _, err := m.TotalCollateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.ClaimProposalParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.PoolParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.NextPurchaseId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextPurchaseId))
		i--
		dAtA[i] = 0x18
	}
	if m.NextPoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextPoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ShieldAdmin) > 0 {
		i -= len(m.ShieldAdmin)
		copy(dAtA[i:], m.ShieldAdmin)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ShieldAdmin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OriginalStaking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginalStaking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginalStaking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PurchaseId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PurchaseId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposalIDReimbursementPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalIDReimbursementPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalIDReimbursementPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reimbursement.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ProposalId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Reimbursement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reimbursement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reimbursement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PayoutTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PayoutTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintGenesis(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x1a
	if len(m.Beneficiary) > 0 {
		i -= len(m.Beneficiary)
		copy(dAtA[i:], m.Beneficiary)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Beneficiary)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinShieldPurchase) > 0 {
		for iNdEx := len(m.MinShieldPurchase) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinShieldPurchase[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.PoolShieldLimit.Size()
		i -= size
		if _, err := m.PoolShieldLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n8, err8 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.WithdrawPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.WithdrawPeriod):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintGenesis(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x1a
	{
		size := m.ShieldFeesRate.Size()
		i -= size
		if _, err := m.ShieldFeesRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	n9, err9 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ProtectionPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.ProtectionPeriod):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintGenesis(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClaimProposalParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimProposalParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimProposalParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeesRate.Size()
		i -= size
		if _, err := m.FeesRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.DepositRate.Size()
		i -= size
		if _, err := m.DepositRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.MinDeposit) > 0 {
		for iNdEx := len(m.MinDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n10, err10 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.PayoutPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.PayoutPeriod):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintGenesis(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x12
	n11, err11 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ClaimPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.ClaimPeriod):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintGenesis(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShieldAdmin)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.NextPoolId != 0 {
		n += 1 + sovGenesis(uint64(m.NextPoolId))
	}
	if m.NextPurchaseId != 0 {
		n += 1 + sovGenesis(uint64(m.NextPurchaseId))
	}
	l = m.PoolParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.ClaimProposalParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TotalCollateral.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TotalWithdrawing.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TotalShield.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TotalClaimed.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.ServiceFees.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.RemainingServiceFees.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PurchaseLists) > 0 {
		for _, e := range m.PurchaseLists {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Withdraws) > 0 {
		for _, e := range m.Withdraws {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastUpdateTime)
	n += 2 + l + sovGenesis(uint64(l))
	l = m.ShieldStakingRate.Size()
	n += 2 + l + sovGenesis(uint64(l))
	l = m.GlobalStakingPool.Size()
	n += 2 + l + sovGenesis(uint64(l))
	if len(m.StakeForShields) > 0 {
		for _, e := range m.StakeForShields {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OriginalStakings) > 0 {
		for _, e := range m.OriginalStakings {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ProposalIDReimbursementPairs) > 0 {
		for _, e := range m.ProposalIDReimbursementPairs {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *OriginalStaking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PurchaseId != 0 {
		n += 1 + sovGenesis(uint64(m.PurchaseId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *ProposalIDReimbursementPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovGenesis(uint64(m.ProposalId))
	}
	l = m.Reimbursement.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Reimbursement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.Beneficiary)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PayoutTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ProtectionPeriod)
	n += 1 + l + sovGenesis(uint64(l))
	l = m.ShieldFeesRate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.WithdrawPeriod)
	n += 1 + l + sovGenesis(uint64(l))
	l = m.PoolShieldLimit.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.MinShieldPurchase) > 0 {
		for _, e := range m.MinShieldPurchase {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ClaimProposalParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ClaimPeriod)
	n += 1 + l + sovGenesis(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.PayoutPeriod)
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.MinDeposit) > 0 {
		for _, e := range m.MinDeposit {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.DepositRate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.FeesRate.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShieldAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPoolId", wireType)
			}
			m.NextPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPurchaseId", wireType)
			}
			m.NextPurchaseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPurchaseId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimProposalParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimProposalParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWithdrawing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalWithdrawing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalClaimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalClaimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServiceFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingServiceFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingServiceFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, Provider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseLists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseLists = append(m.PurchaseLists, PurchaseList{})
			if err := m.PurchaseLists[len(m.PurchaseLists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdraws = append(m.Withdraws, Withdraw{})
			if err := m.Withdraws[len(m.Withdraws)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastUpdateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldStakingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShieldStakingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalStakingPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalStakingPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeForShields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeForShields = append(m.StakeForShields, ShieldStaking{})
			if err := m.StakeForShields[len(m.StakeForShields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalStakings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalStakings = append(m.OriginalStakings, OriginalStaking{})
			if err := m.OriginalStakings[len(m.OriginalStakings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalIDReimbursementPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposalIDReimbursementPairs = append(m.ProposalIDReimbursementPairs, ProposalIDReimbursementPair{})
			if err := m.ProposalIDReimbursementPairs[len(m.ProposalIDReimbursementPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginalStaking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginalStaking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginalStaking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseId", wireType)
			}
			m.PurchaseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchaseId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalIDReimbursementPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalIDReimbursementPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalIDReimbursementPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reimbursement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reimbursement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reimbursement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reimbursement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reimbursement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beneficiary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beneficiary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PayoutTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectionPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ProtectionPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldFeesRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShieldFeesRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.WithdrawPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolShieldLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolShieldLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinShieldPurchase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinShieldPurchase = append(m.MinShieldPurchase, types.Coin{})
			if err := m.MinShieldPurchase[len(m.MinShieldPurchase)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimProposalParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimProposalParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimProposalParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ClaimPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.PayoutPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDeposit = append(m.MinDeposit, types.Coin{})
			if err := m.MinDeposit[len(m.MinDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeesRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
